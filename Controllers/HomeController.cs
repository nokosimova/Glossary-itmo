using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Grossary.Models;

namespace Grossary.Controllers;

public class HomeController : Controller
{
    private readonly ILogger<HomeController> _logger;
    public static Termine[] glossary;

    public HomeController(ILogger<HomeController> logger)
    {
        _logger = logger;
        glossary = new Termine[]{
            new Termine("Конкурентность", "Способность выполнять сразу несколько задач за единицу времени"),
            new Termine("Параллелизм", "Способность делать некоторый объем вычислений путем разделения их между потоками, которые работают конкурентно."),
            new Termine("Многопоточность", "Такая форма конрурентности, которая использует несколько потоков"),
            new Termine("Процесс", "Процесс содержит в себе код программы, данные для её работы, файловые ресурсы и информацию о готовности запуска программы, которая направляется в ОС."),
            new Termine("Поток", "Создаётся в рамках определённого процесса. Содержит стэк и часть кода, который будет выполняться в данном потоке. Это некоторая абстракция над процессом."),
            new Termine("Ошибки Гейзенбага", "Данный вид ошибок не является систематическим, поскольку меняет свои свойства или же исчезает при повторной попытке обнаружения."),
            new Termine("Состояние гонки", "Вид ошибок многопоточности, возникающий в случае, когда несколько потоков одновременно обращаются к одним и тем же данным чтобы изменить их, и результат работы программы полностью зависит от относительного времени работы потоков с этими данными."),
            new Termine("Взаимоблокировка", "Вид ошибок, возникающий, когда два или более потока попадают одновременно в состояние ожидания каких-то действий друг друга, и ни один из не запустится, пока другой не выполнит свою работу"),
            new Termine("Нарушение атомарности", "Ошибка, возникающая в тот момент, когда один поток нарушает атомарность, обеспечивающуюся другим потоком. "),
            new Termine("Нарушение порядка", "Ошибка, возникающая в тот момент, когда планируемый порядок обращения к памяти меняется во время параллельного выполнения несколькими потоками"),
            new Termine("Динамический анализ", "Способ отладки кода, который подразумевает запуск программы на исполнение"),
            new Termine("Статический анализ", "Способ отладки, который выполняется путем автоматического изучения исходного кода без необходимости выполнения программы."),
            new Termine("Синхронизация", "Обеспечение совместной работы двух или более потоков, при которой гарантируется, что каждый поток достигнет известной точки работы по отношению к другим потокам, прежде чем продолжить. "),
            new Termine("Мьютекс", "Один из примитивов синхронизақии, который расшифровывается как “взаимное исключение”"),
            new Termine("Монитор", "Механизм синхронизации языкового уровня, который предлагает потокам синхронизироваться и взаимодействовать внутри друг с другом для доступа к общим ресурсам"),
            new Termine("Семафоры", "Переменные, используемые для координации действий нескольких потоков в работе приложения")
        };
    }

    public IActionResult Index()
    {
        return View();
    }

    public IActionResult Graph()
    {
        return View();
    }

    public IActionResult TerminesList()
    {
        return View(glossary);
    }

    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    public IActionResult Error()
    {
        return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
    }
}
